#ifndef __REPO_GRAMMAR_H_
#define __REPO_GRAMMAR_H_

#include "../../common/include/common_definitions.h"

#ifndef __cplusplus
  static char const DELIMITER_LIST_MULTIPLE_DS_DEFINITIONS = ';';
  static char const DELIMITER_KEY_FILTER = ':';
  static char const DELIMITER_OPEN_KEY = '[';
  static char const DELIMITER_CLOSE_KEY = ']';
  static char const DELIMITER_FILTER_TOKENS = '.';

  static char const FILTER_TOKEN_REINTERPRET_REPLACEMENT_START = '(';
  static char const FILTER_TOKEN_REINTERPRET_REPLACEMENT_END = ')';
  static char const FILTER_TOKEN_REPLACEMENT_DELIMITER = '>';

  #define TOTAL_REPO_GRAMMAR_DELIMITERS 9
  static char const ALL_REPO_GRAMMAR_DELIMITERS[TOTAL_REPO_GRAMMAR_DELIMITERS] =
  {
    ';',
    ',',
    ':',
    '[',
    ']',
    '.',
    '(',
    ')',
    '>'
  };

  static char const NEGATIVE_INTEGER_SIGN = '-';
  static char const POSITIVE_INTEGER_SIGN = '+';
  static char const DELIMITER_RANGE_SINGLE_CHAR = '.';
  static char const DELIMITER_OPEN_LIST = '{';
  static char const DELIMITER_CLOSE_LIST = '}';
  static char const DELIMITER_OPEN_EXPR = '(';
  static char const DELIMITER_CLOSE_EXPR = ')';

  static char const REGEXP_WILDCARD_ANY_TOKEN       = '*';
  static char const REGEXP_WILDCARD_ANY_SINGLE_CHAR = '?';

  static char const * const REGEXP_FILTER_SINGLE_TOKEN_ONLY = "(\\w+)";
  static char const * const REGEXP_FILTER_TOKEN_AND_TOKEN_TO_CHECK_HISTORY = "(\\w+\\((\\w+)\\))";
  static char const * const REGEXP_FILTER_TOKEN_AND_TOKEN_TO_REPLACE = "(\\w+\\((\\>\\w+)\\))";
  static char const * const REGEXP_FILTER_TOKEN_AND_TOKENS_TO_CHECK_REPLACE = "(\\w+\\((\\w+\\>\\w+)\\))";

  static char const * const FILTER_TOKEN_REPLACEMENTS_WILDCARD_TOKEN = "TOKENS_FOR_REPLACEMENT";
  static char const * const FILTER_TOKEN_ONLY_REPLACEMENT_TEMPLATE = "\\(TOKENS_FOR_REPLACEMENT\\)";
  static char const * const FILTER_TOKEN_WITH_REPLACEMENT_TEMPLATE = "\\w+\\(TOKENS_FOR_REPLACEMENT\\)";

#else
namespace RepoGrammar{
  constexpr char const * const DEFAULT_DELIMITERS = " \t\r\n";

  constexpr size_t const DEFAULT_SIZE_OF_GRAMMAR_ITEM = 1;
  constexpr char const DELIMITER_LIST_ITEMS = ',';
  constexpr char const DELIMITER_LIST_MULTIPLE_DS_DEFINITIONS = ';';
  constexpr char const DELIMITER_KEY_FILTER = ':';
  constexpr char const DELIMITER_OPEN_KEY = '[';
  constexpr char const DELIMITER_CLOSE_KEY = ']';
  constexpr char const DELIMITER_FILTER_TOKENS = '.';

  constexpr char FILTER_TOKEN_REINTERPRET_REPLACEMENT_START = '(';
  constexpr char FILTER_TOKEN_REINTERPRET_REPLACEMENT_END = ')';
  constexpr char FILTER_TOKEN_REPLACEMENT_DELIMITER = '>';

  constexpr static size_t TOTAL_REPO_GRAMMAR_DELIMITERS = 9;
  constexpr static char ALL_REPO_GRAMMAR_DELIMITERS[TOTAL_REPO_GRAMMAR_DELIMITERS] =
  {
    DELIMITER_LIST_MULTIPLE_DS_DEFINITIONS,
    DELIMITER_LIST_ITEMS,
    DELIMITER_KEY_FILTER,
    DELIMITER_OPEN_KEY,
    DELIMITER_CLOSE_KEY,
    DELIMITER_FILTER_TOKENS,
    FILTER_TOKEN_REINTERPRET_REPLACEMENT_START,
    FILTER_TOKEN_REINTERPRET_REPLACEMENT_END,
    FILTER_TOKEN_REPLACEMENT_DELIMITER
  };

  constexpr char const NEGATIVE_INTEGER_SIGN = '-';
  constexpr char const POSITIVE_INTEGER_SIGN = '+';
  constexpr char const DELIMITER_RANGE_SINGLE_CHAR = '.';
  constexpr char const DELIMITER_OPEN_LIST = '{';
  constexpr char const DELIMITER_CLOSE_LIST = '}';
  constexpr char const DELIMITER_OPEN_EXPR = '(';
  constexpr char const DELIMITER_CLOSE_EXPR = ')';

  constexpr char const REGEXP_WILDCARD_ANY_TOKEN = '*';

  constexpr char const * const REGEXP_FILTER_SINGLE_TOKEN_ONLY = "(\\w+)";
  constexpr char const * const REGEXP_FILTER_TOKEN_AND_TOKEN_TO_CHECK_HISTORY = "(\\w+\\((\\w+)\\))";
  constexpr char const * const REGEXP_FILTER_TOKEN_AND_TOKEN_TO_REPLACE = "(\\w+\\((\\>\\w+)\\))";
  constexpr char const * const REGEXP_FILTER_TOKEN_AND_TOKENS_TO_CHECK_REPLACE = "(\\w+\\((\\w+\\>\\w+)\\))";

  constexpr char const * const FILTER_TOKEN_REPLACEMENTS_WILDCARD_TOKEN = "TOKENS_FOR_REPLACEMENT";
  constexpr char const * const FILTER_TOKEN_ONLY_REPLACEMENT_TEMPLATE = "\\(TOKENS_FOR_REPLACEMENT\\)";
  constexpr char const * const FILTER_TOKEN_WITH_REPLACEMENT_TEMPLATE = "\\w+\\(TOKENS_FOR_REPLACEMENT\\)";
} //end namespace RepoGrammar
#endif // __cplusplus

enum TYPE_KEY_INDEX{
   ATOM_INTEGER,
   ATOM_VARIABLE,
   SIMPLE_RANGE,
   RANGE_WITH_BOUNDARY_AS_SIMPLE_ARITHM_EXPR,
   SIMPLE_LIST,
   SIMPLE_ARITHM_EXPR,
   ARITHM_EXPR,
   SIMPLE_REG_EXP,
   DIMENSION_TYPES_KEY_INDEX
};

enum PREDEFINED_VARS{
   ABS_STEP_N,
   ABS_LOOP_ITERATION_N,
   TOTAL_PREDEFINED_VARS
};
static char const * const magicVars[TOTAL_PREDEFINED_VARS] = {
  "STEP_N",
  "ITERATION_N"
};

enum ARITHM_EXPR_OPERANDS{
  FIRST_OPERAND,
  SECOND_OPERAND,
  TOTAL_ARITHM_EXPR_OPERANDS
};

enum ARITHM_OPERATIONS{
  ADDITION,
  SUBTRACTION,
  MULTIPLICATION,
  INTEGER_DIVISION,
  TOTAL_ARITHM_OPERATIONS
};
static char const operations[TOTAL_ARITHM_OPERATIONS] = {
  '+',
  '-',
  '*',
  '/'
};

enum INDEX_FILTER_TOKEN{
    CREATOR_NAME,
    MODEL_NAME,
    DS_NAME,
    TRACK_NAME,
    TOTAL_FILTER_TOKENS
};

enum TYPES_FILTER_TOKENS{
   PLAIN_STRING,
   REG_EXP,
   TOKEN_WITH_REINTERPRET_PART,
   TOKEN_WITH_REPLACEMENT_PART,
   TOKEN_WITH_REINTERPRET_AND_REPLACEMENT_PARTS,
   DIMENSION_TYPES_FILTER_TOKENS
};
enum PARSE_ERRORS {
    MISSING_TOKEN,
    TOKEN_IN_LIST_MUST_BE_SINGLE_CHAR_AT_LEAST,
    MISSING_FIRST_TOKEN_IN_LIST,
    MISSING_LAST_TOKEN_IN_LIST,
    MISSING_KEY_AS_STR,
    MISSING_PTR_TO_ALLOCATED_DS_KEY_STRUCT,
    KEY_NOT_FOUND,
    KEY_OPEN_DELIMITER_MISSING,
    KEY_OPEN_DELIMITERS_MUST_BE_EXACTLY_TWO,
    MISSING_DS_INDEX,
    KEY_CLOSE_DELIMITERS_MISSING,
    KEY_CLOSE_DELIMITERS_MUST_BE_EXACTLY_TWO,
    MISMATCH_OPEN_AND_CLOSE_DELIMITERS_IN_KEY_AS_STR,
    MISSING_NESTED_EXPR_IN_BRACKETS,
    MISSING_OPERATION_AFTER_NESTED_EXPR_BRACKETS,
    REDUNDANT_OPERATION_AFTER_SECOND_OPERAND,

    MISSING_OR_MALFORMED_LIST_WITH_PARENT_INDEXES,
    MISSING_PARENT_INDEX,
    MISSING_OPEN_DELIMITER_OF_LIST_WITH_PARENT_INDEXES,
    MISSING_TWO_CLOSE_DELIMITERS_OF_LIST_WITH_PARENT_INDEXES,

    MULTIPLE_DELIMITERS_KEY_FILTER,
    MISSING_FILTER,
    MALFORMED_FILTER,
    MISSING_TOKEN_IN_FILTER,
    UNSUPPORTED_TYPE_OF_TOKEN_IN_FILTER,
    MISSING_FIRST_TOKEN_IN_FILTER,
    MISSING_LAST_TOKEN_IN_FILTER,
    TOO_MANY_TOKENS_IN_FILTER,
    MISMATCH_SIZE_CREATOR_NAMES,
    MISMATCH_CREATOR_NAMES,
    MISMATCH_SIZE_MODEL_NAMES,
    MISMATCH_MODEL_NAMES,
    MISMATCH_SIZE_DS_NAMES,
    MISMATCH_DS_NAMES,

    FORBIDDEN_PARENT_INDEX_AS_LIST,
    RELATIVE_STEP_N_OUT_OF_SCOPE,
    CAN_NOT_EVALUATE_EXPR_OF_UNKNOWN_TYPE,
    CAN_NOT_SUBSTITUTE_UNINITIALIZED_VARIABLE,
    VARIABLE_INDEX_OUT_OF_ARRAY_BOUNDARY,
    CAN_NOT_SUBSTITUTE_VARIABLE_AS_ABS_STEP_N_WITH_NEGATIVE_INTEGER,
    CAN_NOT_EVALUATE_LEFT_BOUNDARY_OF_SIMPLE_RANGE,
    CAN_NOT_EVALUATE_RIGHT_BOUNDARY_OF_SIMPLE_RANGE,
    SUBTRACTION_YIELDS_NEGATIVE_INTEGER_WHILE_EVALUATING_SIMPLE_ARITHM_EXPR,
    DIVISION_BY_ZERO_WHILE_EVALUATING_SIMPLE_ARITHM_EXPR,
    INDEX_OF_LIST_ITEM_OUT_OF_LIST_BOUNDARY,
    REGISTERED_VARIABLE_NOT_INITIALIZED,
    INDEX_VALUES_MUST_BE_POSITIVE_INTEGERS,
    AT_LEAST_ONE_VALUE_OF_DS_INDEX_MUST_BE_GT_ANY_VALUE_OF_PARENT_INDEXES,
    AT_LEAST_ONE_VALUE_OF_NEXT_PARENT_INDEX_MUST_BE_GT_ANY_VALUE_OF_PREV_PARENT_INDEXES,
    FAILED_SEMANTICS_VALIDATION_FOR_DS_INDEX,
    FAILED_SEMANTICS_VALIDATION_FOR_PARENT_INDEX,

    MISSING_ITERATOR_TO_RETRIEVE_KEYS_START_WITH_GET_FIRST_KEY,
    TOKEN_INDEX_OUT_OF_ARRAY_BOUNDARY,

    TOTAL_PARSE_ERRORS
};

static char const * const errorMsgs[TOTAL_PARSE_ERRORS] = {
    "MISSING_TOKEN",
    "TOKEN_IN_LIST_MUST_BE_SINGLE_CHAR_AT_LEAST",
    "MISSING_FIRST_TOKEN_IN_LIST",
    "MISSING_LAST_TOKEN_IN_LIST",
    "MISSING_KEY_AS_STR",
    "MISSING_PTR_TO_ALLOCATED_DS_KEY_STRUCT",
    "KEY_NOT_FOUND",
    "KEY_OPEN_DELIMITER_MISSING",
    "KEY_OPEN_DELIMITERS_MUST_BE_EXACTLY_TWO",
    "MISSING_DS_INDEX",
    "KEY_CLOSE_DELIMITERS_MISSING",
    "KEY_CLOSE_DELIMITERS_MUST_BE_EXACTLY_TWO",
    "MISMATCH_OPEN_AND_CLOSE_DELIMITERS_IN_KEY_AS_STR",
    "MISSING_NESTED_EXPR_IN_BRACKETS",
    "MISSING_OPERATION_AFTER_NESTED_EXPR_BRACKETS",
    "REDUNDANT_OPERATION_AFTER_SECOND_OPERAND",

    "MISSING_OR_MALFORMED_LIST_WITH_PARENT_INDEXES",
    "MISSING_PARENT_INDEX",
    "MISSING_OPEN_DELIMITER_OF_LIST_WITH_PARENT_INDEXES",
    "MISSING_TWO_CLOSE_DELIMITERS_OF_LIST_WITH_PARENT_INDEXES",

    "MULTIPLE_DELIMITERS_KEY_FILTER",
    "MISSING_FILTER",
    "MALFORMED_FILTER",
    "MISSING_TOKEN_IN_FILTER",
    "UNSUPPORTED_TYPE_OF_TOKEN_IN_FILTER",
    "MISSING_FIRST_TOKEN_IN_FILTER",
    "MISSING_LAST_TOKEN_IN_FILTER",
    "TOO_MANY_TOKENS_IN_FILTER",
    "MISMATCH_SIZE_CREATOR_NAMES",
    "MISMATCH_CREATOR_NAMES",
    "MISMATCH_SIZE_MODEL_NAMES",
    "MISMATCH_MODEL_NAMES",
    "MISMATCH_SIZE_DS_NAMES",
    "MISMATCH_DS_NAMES",

    "FORBIDDEN_PARENT_INDEX_AS_LIST",

    "RELATIVE_STEP_N_OUT_OF_SCOPE",
    "CAN_NOT_EVALUATE_EXPR_OF_UNKNOWN_TYPE",
    "CAN_NOT_SUBSTITUTE_UNINITIALIZED_VARIABLE",
    "VARIABLE_INDEX_OUT_OF_ARRAY_BOUNDARY",
    "CAN_NOT_SUBSTITUTE_VARIABLE_AS_ABS_STEP_N_WITH_NEGATIVE_INTEGER",
    "CAN_NOT_EVALUATE_LEFT_BOUNDARY_OF_SIMPLE_RANGE",
    "CAN_NOT_EVALUATE_RIGHT_BOUNDARY_OF_SIMPLE_RANGE",
    "SUBTRACTION_YIELDS_NEGATIVE_INTEGER_WHILE_EVALUATING_SIMPLE_ARITHM_EXPR",
    "DIVISION_BY_ZERO_WHILE_EVALUATING_SIMPLE_ARITHM_EXPR",
    "INDEX_OF_LIST_ITEM_OUT_OF_LIST_BOUNDARY",
    "REGISTERED_VARIABLE_NOT_INITIALIZED",
    "INDEX_VALUES_MUST_BE_POSITIVE_INTEGERS",
    "AT_LEAST_ONE_VALUE_OF_DS_INDEX_MUST_BE_GT_ANY_VALUE_OF_PARENT_INDEXES",
    "AT_LEAST_ONE_VALUE_OF_NEXT_PARENT_INDEX_MUST_BE_GT_ANY_VALUE_OF_PREV_PARENT_INDEXES",
    "FAILED_SEMANTICS_VALIDATION_FOR_DS_INDEX",
    "FAILED_SEMANTICS_VALIDATION_FOR_PARENT_INDEX",

    "MISSING_ITERATOR! TO_RETRIEVE_KEYS_START_WITH_GET_FIRST_KEY",
    "TOKEN_INDEX_OUT_OF_ARRAY_BOUNDARY"
};

#endif //__REPO_GRAMMAR_H_
